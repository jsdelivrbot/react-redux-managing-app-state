Container Class

It is just a class that have access directly to the Application State (Redux).


More Info

	REACT-REDUX

		React and Redux are not at all connected. They are a totally separed projects and to connect them we need to use a specific library named ReactRedux.

		So, you must to import a special component named 'connect' from react-redux.

			import { connect } from 'react-redux';

		Then, you need to use this component into the container class. Here we won't export the class, instead of it we will create a function named 'mapStateToProps' that will receive the 'application state' as a parameter. Whatever is returned will show up as props inside of BookList. 
		EVERY TIME the application state changes, this method is called!

			function mapStateToProps(state) {
				return {
					books = state.books;
				};
			}

		Finally, remember that we are not using the 'export default' directly into our component (in this case the 'container class') anymore.
		However we yet must to export our component ('container class'), using the 'connect' component from 'react-redux'. Here we will also connect our container class with the function used to connect the application state to the class props (mapSteteToProps).

		This is the snippet of code that produces the 'container class'.

			export default connect(mapStateToProps)(BooksList);

		Involved files:
			/reducers/reducer_books.js
				It is our application state data. 

			
			/reducers/index.js
				It is the file that combines the application state data to a state name. 

				BooksReduce -> books

			/containers/books-list.js
				It is our container class component. 
 
			/components/app.js
				Just render the books-list.js.


	ACTIONS VS ACTIONS-CREATORS

		An Action Creator is just a function that returns an Action.
		An Action is just an object that flows through all of different Reducers. 
		Reducers can then use that Action to produce a different value for a particular piece of State.

		At this example, we will be creating an Action to select books from the BookList.

		Involved files:

			/actions/index.js
				Here we just export a function that receives a book as a parameter. 

				ex.:

					export default function selectBook(book) {
					    console.log('A book has been selected: ', book.tilte);
					}
 
			/containers/book-list.js
				Here we will bind the selectBook Action to be used on the book-list.js, add the bindActionCreators (redux)  

				The bindActionCreators is a a function will be responsible to take the value from the Action selectBook and check all the reducers into the application looking for its own reducer. (???)

				ex.:

					import { selectBook } from '../actions/index';
					import { bindActionCreators } from 'redux';

					// Anything returned from this function will end up as props 
					// on the BookList container
					function mapDispatchToProps(dispatch) {
					    // Whenever selectBook is called, the result should be passed 
					    // to all of our reducers
					    return bindActionCreators( { selectBook: selectBook }, dispatch );
					}


					// Promote BookList from a Component to a Container - It needs to know 
					// about this new dispatch method, selectBook. Make it available as a prop
					export default connect(mapStateToProps, mapDispatchToProps)(BooksList);


					


